def please_tool(name:str, version=CONFIG.E2E.PLEASE_VERSION, visibility:list):

    version_dep = None
    if version == "latest":
        version_dep = tag(name, "version")
        remote_file(
            name = version_dep,
            url = "https://get.please.build/latest_version",
            visibility = ["PUBLIC"],
        )
        version = f"$(cat $(location :{version_dep}))"

    genrule(
        name = name,
        cmd = f"export VERSION={version} && curl https://get.please.build/{CONFIG.OS}_{CONFIG.ARCH}/$VERSION/please_$VERSION --output $OUT",
        outs = [name],
        visibility = visibility,
        deps = [f":{version_dep}"] if version_dep else None,
        binary = True,
    )

# Runs e2e tests against please in a specified repo
def please_repo_e2e_test(
        name: str,
        plz_command: str,
        repo: str,
        data: dict={},
        deps: list=[],
        tools: dict={},
        expected_failure: bool = False,
        expected_output: dict = {},
        expect_output_contains: dict = {},
        expect_output_doesnt_contain: dict = {},
        labels: list = [],
):
    plz_command = plz_command.replace("plz ", "$TOOLS_PLEASE ")
    if expected_failure:
        plz_command += "; [ ! $? -eq 0 ]"

    test_cmd = [
        "mv $DATA_BASE_CONFIG $DATA_REPO",
        "cd $DATA_REPO",
        plz_command,
    ]

    if expected_output:
        test_cmd += [f"$TOOLS_CONTENT_CHECKER '{o}' '{c}'" for o, c in expected_output.items()]

    if expect_output_contains:
        test_cmd += [f'_STR="$(cat {o})" _SUBSTR="{c}" && if [ "${_STR##*$_SUBSTR*}" ]; then echo "$_STR"; exit 1; fi' for o, c in expect_output_contains.items()]

    if expect_output_doesnt_contain:
        test_cmd += [f'_STR="$(cat {o})" _SUBSTR="{c}" && if [ -z "${_STR##*$_SUBSTR*}" ]; then echo "$_STR"; exit 1; fi' for o, c in expect_output_contains.items()]

    test_cmd = ' && '.join(test_cmd)

    data["REPO"] = [repo]
    data["BASE_CONFIG"] = [CONFIG.E2E.BASE_CONFIG]

    tools["PLEASE"] = [CONFIG.E2E.PLEASE_TOOL]
    tools["CONTENT_CHECKER"] = [CONFIG.E2E.CONTENT_CHECKER]

    return gentest(
        name = name,
        test_cmd = test_cmd,
        test_tools = tools,
        data = data,
        deps = deps,
        env = {
            "PLZ_CONFIG_PROFILE": "e2e",
        },
        no_test_output = True,
        labels = labels + ["plz_e2e_test", "e2e"],
        sandbox = False,
    )

# Like please_repo_e2e_test, this runs end-to-end tests on Please itself but in the current please repo.
def plz_e2e_test(name:str, cmd:str, pre_cmd:str=None, expected_output:str=None,
                 expected_failure:bool=False, expect_output_contains:str=None,
                 expect_output_doesnt_contain:str=None, deps:list=None, data:list=[],
                 labels:list=None, completion:bool=False,
                 expect_file_exists:str=None, expect_file_doesnt_exist:str=None, timeout:int=None):
    # Please isn't really designed to work this way (running a test against the entire source repo)
    # but we can make it do it and it's a convenient way of testing the tool itself.

    def _e2e_test_cmd(cmd):
        args = '$PLZ_ARGS --noupdate -o sandbox.test:false -o sandbox.build:false -o sandbox.namespace:false '
        if package_name().startswith('test/parse'):
            args += ' -o parse.buildfilename:BUILD,BUILD.plz,BUILD.test '
        cmd = cmd.replace('plz ', f'$TOOLS {args} -o cache.dirclean:false --log_file plz-out/log/{name}.log ')
        if expected_failure:
            test_cmd = '%s 2>&1 | tee output; if [ $? -eq 0 ]; then exit 1; fi; ' % cmd
        else:
            test_cmd = '%s 2>&1 | tee output && ' % cmd
        if expected_output and expect_output_contains:
            raise ValueError('Can only pass one of expected_output and expect_output_contains')
        elif expected_output:
            test_cmd += 'diff -au output $(location %s)' % expected_output
        elif expect_output_contains:
            test_cmd += f'_STR="$(cat output)" _SUBSTR="{expect_output_contains}" && if [ "${_STR##*$_SUBSTR*}" ]; then echo "$_STR"; exit 1; fi'
        elif expect_output_doesnt_contain:
            test_cmd += f'_STR="$(cat output)" _SUBSTR="{expect_output_doesnt_contain}" && if [ -z "${_STR##*$_SUBSTR*}" ]; then echo "$_STR"; exit 1; fi'
        elif expect_file_exists:
            test_cmd += 'if [ ! -f %s ]; then cat output; exit 1; fi' % expect_file_exists
        elif expect_file_doesnt_exist:
            test_cmd += 'if [ -f %s ]; then cat output; exit 1; fi' % expect_file_doesnt_exist
        else:
            test_cmd += 'true'
        if completion:
            test_cmd = "export GO_FLAGS_COMPLETION=1; " + test_cmd
        if pre_cmd:
            test_cmd = pre_cmd + ' && ' + test_cmd
        return test_cmd

    if expected_output:
        data += [expected_output]
    gentest(
        name = name,
        test_cmd = {
            'opt': _e2e_test_cmd(cmd),
            'dbg': _e2e_test_cmd(cmd.replace('plz ', 'plz -c dbg ')),
            'cover': _e2e_test_cmd(cmd.replace('plz ', 'plz -c cover ')),
        },
        data = data,
        deps = deps,
        test_tools = [CONFIG.E2E.PLEASE_TOOL],
        labels = ['e2e'] + (labels or []),
        no_test_output = True,
        sandbox = False,
        local = True,
        pass_env = ["PLZ_ARGS"],
        exit_on_error = False,
        timeout = timeout,
    )
